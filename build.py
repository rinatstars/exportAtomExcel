import shutil
import os
import subprocess

APP_NAME = "exportExcel"
SPEC_FILE = "exportExcel.spec"
FINAL_EXE_DIR = r"D:\Project_python\exportAtomExcelExe"
EXPORTEXCELCONFIGURATOR_PATH = r"D:\Project_python\ExportExcelConfigurator"



def get_version(path=None):
    if path is None:
        with open("version.txt") as f:
            return f.read().strip()
    else:
        with open(os.path.join(path, "version.txt")) as f:
            return f.read().strip()


def create_version_file(version: str, filename="file_version_info.txt"):
    content = f"""
# UTF-8
VSVersionInfo(
  ffi=FixedFileInfo(
    filevers=({version.replace('.', ',')}, 0),
    prodvers=({version.replace('.', ',')}, 0),
    mask=0x3f,
    flags=0x0,
    OS=0x40004,
    fileType=0x1,
    subtype=0x0,
    date=(0, 0)
  ),
  kids=[
    StringFileInfo([
      StringTable(
        '040904B0',
        [StringStruct('CompanyName', '–í–ú–ö-–û–ø—Ç–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'),
         StringStruct('FileDescription', '{APP_NAME}'),
         StringStruct('FileVersion', '{version}'),
         StringStruct('InternalName', '{APP_NAME}'),
         StringStruct('LegalCopyright', '¬© –í–ú–ö-–û–ø—Ç–æ—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ 2025'),
         StringStruct('OriginalFilename', '{APP_NAME}.exe'),
         StringStruct('ProductName', '{APP_NAME}'),
         StringStruct('ProductVersion', '{version}')])
    ]),
    VarFileInfo([VarStruct('Translation', [1033, 1200])])
  ]
)
"""
    with open(filename, "w", encoding="utf-8") as f:
        f.write(content)
    return filename


def create_common_version_file(ver_1: str, ver_2: str, dirname):
    full_path = os.path.join(dirname, "version.txt")
    content = f"exporExcel v.{ver_1}\nexporExcelConfigurator v.{ver_2}"
    with open(full_path, "w", encoding="utf-8") as f:
        f.write(content)
    return full_path


def copytree_merge(src, dst):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ src ‚Üí dst —Å –∑–∞–º–µ–Ω–æ–π (–ø–æ–≤–µ—Ä—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)."""
    os.makedirs(dst, exist_ok=True)
    for root, dirs, files in os.walk(src):
        rel_path = os.path.relpath(root, src)
        target_dir = os.path.join(dst, rel_path) if rel_path != "." else dst
        os.makedirs(target_dir, exist_ok=True)
        for file in files:
            shutil.copy2(os.path.join(root, file), os.path.join(target_dir, file))


def git_push(version: str):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        status = subprocess.run(["git", "status", "--porcelain"], capture_output=True, text=True)
        if status.stdout.strip():  # –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            subprocess.run(["git", "add", "version.txt"], check=True)
            subprocess.run(["git", "commit", "-m", f"Release v{version}"], check=True)
            subprocess.run(["git", "push"], check=True)
            print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã –∏ –∑–∞–ø—É—à–µ–Ω—ã")
        else:
            print("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º commit/push")

        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Å–æ–∑–¥–∞—ë–º —Ç–µ–≥ –∏ –ø—É—à–∏–º –µ–≥–æ
        subprocess.run(["git", "tag", f"v{version}"], check=True)
        subprocess.run(["git", "push", "--tags"], check=True)
        print(f"üè∑ –¢–µ–≥ v{version} —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—à–µ–Ω")

    except subprocess.CalledProcessError as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ git –æ–ø–µ—Ä–∞—Ü–∏–∏:", e)


def build():
    version = get_version()
    dist_dir = os.path.join("dist", f"v{version}")
    latest_dir = os.path.join("dist", "latest")

    # –£–¥–∞–ª–∏–º build/dist, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –º—É—Å–æ—Ä–∞
    if os.path.exists("build"):
        shutil.rmtree("build")
    # if os.path.exists("dist"):
    #     shutil.rmtree("dist")

    # –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å –≤–µ—Ä—Å–∏–µ–π
    create_version_file(version)

    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ .spec
    subprocess.run(
        [os.path.join("venv", "Scripts", "python.exe"), "-m", "PyInstaller", SPEC_FILE],
        check=True
    )

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏
    os.makedirs(dist_dir, exist_ok=True)

    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º exe (–æ–Ω –±—É–¥–µ—Ç –≤ dist/ExportAtomExcel v*.*.*/exportExcel.exe)
    exe_path = os.path.join("dist", APP_NAME, f"{APP_NAME}.exe")
    shutil.move(exe_path, os.path.join(dist_dir, f"{APP_NAME}.exe"))
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º _internal (–æ–Ω –±—É–¥–µ—Ç –≤ dist/ExportAtomExcel v*.*.*/_internal)
    internal_path = os.path.join("dist", APP_NAME, "_internal")
    shutil.move(internal_path, os.path.join(dist_dir, "_internal"))

    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—â–∏–π —Ä–µ–ª–∏–∑,
    # –∫–æ–ø–∏—Ä—É–µ–º –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä
    copytree_merge(dist_dir, FINAL_EXE_DIR)
    # –∫–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç exportAtomExcel
    copytree_merge(os.path.join(EXPORTEXCELCONFIGURATOR_PATH, "dist", "latest"), FINAL_EXE_DIR)

    # —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –≤–µ—Ä—Å–∏—è–º–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω–µ—á–Ω—É—é –ø–∞–ø–∫—É
    version_EAEC = get_version(EXPORTEXCELCONFIGURATOR_PATH)
    create_common_version_file(version, version_EAEC, FINAL_EXE_DIR)

    # –û–±–Ω–æ–≤–ª—è–µ–º latest
    if os.path.exists(latest_dir):
        shutil.rmtree(latest_dir)
    shutil.copytree(dist_dir, latest_dir)

    print(f"\n‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {dist_dir}")
    print(f"üìå –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {latest_dir}")

    # –ó–∞–ª–∏–≤–∞–µ–º –≤ git
    git_push(version)


if __name__ == "__main__":
    build()
